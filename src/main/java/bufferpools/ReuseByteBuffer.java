package bufferpools;import java.nio.ByteBuffer;import java.util.concurrent.atomic.AtomicBoolean;/** * Created by demopoo on 2017/9/22. * 单个缓冲区重复利用方案 */public class ReuseByteBuffer {    public final ByteBuffer byteBuffer;    public int writeIndex;    public int readIndex;    public int readMark;    //一次只允许一个线程进行读或写操作    private AtomicBoolean atomicBoolean = new AtomicBoolean(false);    public ReuseByteBuffer(ByteBuffer byteBuffer){        this.byteBuffer = byteBuffer;    }    /**     * 往缓冲区写数据     * @param bytes     */    public ReuseByteBuffer put(byte[] bytes){        while (!atomicBoolean.compareAndSet(false,true)){        }        byteBuffer.position(writeIndex);        byteBuffer.limit(byteBuffer.capacity());        byteBuffer.put(bytes);        this.writeIndex = byteBuffer.position();        return this;    }    /**     * 压缩缓冲区     */    public ReuseByteBuffer compact(){        byteBuffer.position(readMark);        byteBuffer.limit(readIndex);        byteBuffer.compact();        readMark = 0;        writeIndex = byteBuffer.position();        readIndex -= readMark;        return this;    }}