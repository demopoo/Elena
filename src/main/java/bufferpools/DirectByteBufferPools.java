package bufferpools;import java.nio.ByteBuffer;/** * Created by demopoo on 2017/9/22. */public class DirectByteBufferPools {    private int pageCount;//页数量    private int pageSize;//单页大小    private int chunkSize;//块大小    private int startPage = 0;    private final ByteBufferPage[] byteBufferPages;    public DirectByteBufferPools(int pageCount,int pageSize,int chunkSize){        this.pageCount = pageCount;        this.pageSize = pageSize;        this.chunkSize = chunkSize;        byteBufferPages = new ByteBufferPage[pageCount];        for (int i = 0;i < pageCount;i++){            byteBufferPages[i] = new ByteBufferPage(ByteBuffer.allocateDirect(pageSize),chunkSize);        }    }    /**     * 请求分配     * @param bufferSize 申请的缓冲区大小     * @return     */    public ByteBuffer allocateBuffer(int bufferSize){        //根据请求缓冲区大小计算出需要的内存块        int chunkCount = bufferSize/chunkSize + (bufferSize%chunkSize == 0?0:1);        //选择内存开始页        ByteBuffer  byteBuffer = null;        startPage = (++startPage)%pageCount;        for (int i = startPage;i < byteBufferPages.length;i++){            byteBuffer = byteBufferPages[i].allocate(chunkCount);            if (byteBuffer != null){                break;            }        }        return byteBuffer;    }}